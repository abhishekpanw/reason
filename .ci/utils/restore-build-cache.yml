# Steps for restoring project cache

steps:
  - task: Bash@3
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: '[Cache][Restore] Restoring build cache using REST API'
    continueOnError: true
    inputs:
      targetType: 'inline' # Optional. Options: filePath, inline
      script: |
        ORG="reasonml"
        REST_BUILDS="https://dev.azure.com/$ORG/$SYSTEM_TEAMPROJECT/"'_apis/build/builds?deletedFilter=excludeDeleted&statusFilter=completed&resultFilter=succeeded&queryOrder=finishTimeDescending&$top=1&api-version=4.1'
        REST_BUILDS_RESP=$(curl "$REST_BUILDS")

        if [[ $REST_BUILDS_RESP =~ (\"web\":\{\"href\":\")([^\"]*) ]]; then BUILD_PAGE="${BASH_REMATCH[2]}"; else BUILD_PAGE=""; fi
        if [[ $REST_BUILDS_RESP =~ (\"badge\":\{\"href\":\")([^\"]*) ]]; then BUILD_BADGE="${BASH_REMATCH[2]}"; else BUILD_BADGE=""; fi
        if [[ $REST_BUILDS_RESP =~ (\"id\":)([^,]*) ]]; then BUILD_ID="${BASH_REMATCH[2]}"; else BUILD_ID=""; fi



        REST_ART="https://dev.azure.com/$ORG/$SYSTEM_TEAMPROJECT/_apis/build/builds/$BUILD_ID/artifacts?artifactName=$ART&api-version=4.1"
        ART="cache-${AGENT_OS}-install"
        if [[ $(curl $REST_ART) =~ (downloadUrl\":\")([^\"]*) ]]; then ART_URL="${BASH_REMATCH[2]}"; else ART_URL=""; fi


        echo "Build ID: $BUILD_ID"
        echo "Build Page: $BUILD_PAGE"
        echo "Build Badge: $BUILD_BADGE"
        echo "Build Artifact: $ART_URL"

        curl "$ART_URL" > $(STAGING_DIRECTORY_UNIX)/cache-$(Agent.OS)-install.zip
        cd $(STAGING_DIRECTORY_UNIX)
        gunzip cache-$(Agent.OS)-install.zip
        
      

  - bash: 'mkdir -p $(ESY__CACHE_INSTALL_PATH)'
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: '[Cache][Restore] Create cache directory'

  # - bash: 'cd $(ESY__NPM_ROOT) && tar -xf $(STAGING_DIRECTORY_UNIX)/cache-$(Agent.OS)-install/npm-cache.tar -C .'
  #   continueOnError: true
  #   condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
  #   displayName: '[Cache][Restore] Untar npm cache directory'

  - bash: 'cd $(ESY__CACHE_INSTALL_PATH) && tar -xf $(STAGING_DIRECTORY_UNIX)/cache-$(Agent.OS)-install/esy-cache.tar -C .'
    continueOnError: true
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: '[Cache][Restore] Untar esy cache directory'

  - bash: 'rm -rf *'
    continueOnError: true
    workingDirectory: '$(STAGING_DIRECTORY)'
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: '[Cache][Restore] Clean up'
